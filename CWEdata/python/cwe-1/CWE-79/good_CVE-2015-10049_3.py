# Copyright 2014 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS-IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tests that walk through Course Builder pages."""

__author__ = 'Mike Gainer (mgainer@google.com)'

import cgi
import re
import urllib

from common import crypto
from common import utils as common_utils
from controllers import sites
from controllers import utils
from models import courses
from models import models
from models import transforms
from modules.dashboard import course_settings
from modules.dashboard import filer
from modules.i18n_dashboard import i18n_dashboard
from tests.functional import actions
from tests.functional.actions import assert_contains
from tests.functional.actions import assert_does_not_contain

COURSE_NAME = 'admin_settings'
COURSE_TITLE = 'Admin Settings'
ADMIN_EMAIL = 'admin@foo.com'
NAMESPACE = 'ns_%s' % COURSE_NAME
BASE_URL = '/' + COURSE_NAME
ADMIN_SETTINGS_URL = '/%s%s' % (
    COURSE_NAME, course_settings.HtmlHookRESTHandler.URI)
TEXT_ASSET_URL = '/%s%s' % (
    COURSE_NAME, filer.TextAssetRESTHandler.URI)
STUDENT_EMAIL = 'student@foo.com'
SETTINGS_URL = '/%s/dashboard?action=settings&tab=admin_prefs' % COURSE_NAME


class AdminSettingsTests(actions.TestBase):

    def setUp(self):
        super(AdminSettingsTests, self).setUp()
        actions.simple_add_course(COURSE_NAME, ADMIN_EMAIL, COURSE_TITLE)
        actions.login(ADMIN_EMAIL)

    def test_defaults(self):
        prefs = models.StudentPreferencesDAO.load_or_create()
        self.assertEquals(False, prefs.show_hooks)


class WelcomePageTests(actions.TestBase):

    def setUp(self):
        super(WelcomePageTests, self).setUp()
        self.auto_deploy = sites.ApplicationContext.AUTO_DEPLOY_DEFAULT_COURSE
        sites.ApplicationContext.AUTO_DEPLOY_DEFAULT_COURSE = False

    def tearDown(self):
        sites.ApplicationContext.AUTO_DEPLOY_DEFAULT_COURSE = self.auto_deploy
        super(WelcomePageTests, self).tearDown()

    def test_welcome_page(self):
        actions.login(ADMIN_EMAIL, is_admin=True)
        response = self.get('/')
        self.assertEqual(response.status_int, 302)
        self.assertEqual(
            response.headers['location'],
            'http://localhost/admin/welcome')
        response = self.get('/admin/welcome?action=welcome')
        assert_contains('Welcome to Course Builder', response.body)
        assert_contains('/admin/welcome?action=add_first_course', response.body)
        assert_contains('/admin/welcome?action=explore_sample', response.body)

    def test_explore_sample_course(self):
        actions.login(ADMIN_EMAIL, is_admin=True)
        response = self.post(
            '/admin/welcome?action=explore_sample',
            params={'xsrf_token': crypto.XsrfTokenManager.create_xsrf_token(
                'explore_sample')})
        self.assertEqual(response.status_int, 302)
        self.assertEqual(
            response.headers['location'],
            'http://localhost/sample/dashboard')
        response = self.get('/sample/dashboard')
        assert_contains('Power Searching with Google', response.body)
        assert_does_not_contain('explore_sample', response.body)

    def test_create_new_course(self):
        actions.login(ADMIN_EMAIL, is_admin=True)
        response = self.post(
            '/admin/welcome?action=add_first_course',
            params={'xsrf_token': crypto.XsrfTokenManager.create_xsrf_token(
                'add_first_course')})
        self.assertEqual(response.status_int, 302)
        self.assertEqual(
            response.headers['location'],
            'http://localhost/fi