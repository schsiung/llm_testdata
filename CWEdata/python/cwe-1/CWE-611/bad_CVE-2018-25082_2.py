# -*- coding: utf-8 -*-


from __future__ import unicode_literals

import time
import string
import random
import hashlib
import requests

from .base import Map, WeixinError

try:
    from flask import request
except Exception:
    request = None

try:
    from lxml import etree
except ImportError:
    from xml.etree import cElementTree as etree
except ImportError:
    from xml.etree import ElementTree as etree


__all__ = ("WeixinPayError", "WeixinPay")


FAIL = "FAIL"
SUCCESS = "SUCCESS"


class WeixinPayError(WeixinError):

    def __init__(self, msg):
        super(WeixinPayError, self).__init__(msg)


class WeixinPay(object):

    def __init__(self, app_id, mch_id, mch_key, notify_url, key=None, cert=None):
        self.app_id = app_id
        self.mch_id = mch_id
        self.mch_key = mch_key
        self.notify_url = notify_url
        self.key = key
        self.cert = cert
        self.sess = requests.Session()

    @property
    def remote_addr(self):
        if request is not None:
            return request.remote_addr
        return ""

    @property
    def nonce_str(self):
        char = string.ascii_letters + string.digits
        return "".join(random.choice(char) for _ in range(32))

    def sign(self, raw):
        raw = [(k, str(raw[k]) if isinstance(raw[k], int) else raw[k])
               for k in sorted(raw.keys())]
        s = "&".join("=".join(kv) for kv in raw if kv[1])
        s += "&key={0}".format(self.mch_key)
        return hashlib.md5(s.encode("utf-8")).hexdigest().upper()

    def check(self, data):
        sign = data.pop("sign")
        return sign == self.sign(data)

    def to_xml(self, raw):
        s = ""
        for k, v in raw.items():
            s += "<{0}>{1}</{0}>".format(k, v)
        s = "<xml>{0}</xml>".format(s)
        return s.encode("utf-8")

    def to_dict(self, content):
        raw = {}
        root = etree.fromstring(content.encode("utf-8"),
                                parser=etree.XMLParser(resolve_entities=False))
        for child in root:
            raw[child.tag] = child.text
        return raw

    def _fetch(self, url, data, use_cert=False):
        data.setdefault("appid", self.app_id)
        data.setdefault("mch_id", self.mch_id)
        data.setdefault("nonce_str", self.nonce_str)
        data.setdefault("sign", self.sign(data))

        if use_cert:
            resp = self.sess.post(url, data=self.to_xml(data), cert=(self.cert, self.key))
        else:
            resp = self.sess.post(url, data=self.to_xml(data))
        content = resp.content.decode("utf-8")
        if "return_code" in content:
            data = Map(self.to_dict(content))
            if data.return_code == FAIL:
                raise WeixinPayError(data.return_msg)
            if "result_code" in content and data.result_code == FAIL:
                raise WeixinPayError(data.err_code_des)
            return data
        return content

    def reply(self, msg, ok=True):
        code = SUCCESS if ok else FAIL
        return self.to_xml(dict(return_code=code, return_msg=msg))

    def unified_order(self, **data):
        """
        \u7edf\u4e00\u4e0b\u5355
        out_trade_no\u3001body\u3001total_fee\u3001trade_type\u5fc5\u586b
        app_id, mchid, nonce_str\u81ea\u52a8\u586b\u5199
        spbill_create_ip \u5728flask\u6846\u67b6\u4e0b\u53ef\u4ee5\u81ea\u52a8\u586b\u5199, \u975eflask\u6846\u67b6\u9700\u8981\u4e3b\u52a8\u4f20\u5165\u6b64\u53c2\u6570
        """
        url = "https://api.mch.weixin.qq.com/pay/unifiedorder"

        # \u5fc5\u586b\u53c2\u6570
        if "out_trade_no" not in data:
            raise WeixinPayError("\u7f3a\u5c11\u7edf\u4e00\u652f\u4ed8\u63a5\u53e3\u5fc5\u586b\u53c2\u6570out_trade_no")
        if "body" not in data:
            raise WeixinPayError("\u7f3a\u5c11\u7edf\u4e00\u652f\u4ed8\u63a5\u53e3\u5fc5\u586b\u53c2\u6570body")
        if "total_fee" not in data:
            raise WeixinPayError("\u7f3a\u5c11\u7edf\u4e00\u652f\u4ed8\u63a5\u53e3\u5fc5\u586b\u53c2\u6570total_fee")
        if "trade_type" not in data:
            raise WeixinPayError("\u7f3a\u5c11\u7edf\u4e00\u652f\u4ed8\u63a5\u53e3\u5fc5\u586b\u53c2\u6570trade_type")

        # \u5173\u8054\u53c2\u6570
        if data["trade_type"] == "JSAPI" and "openid" not in data:
            raise WeixinPayError("trade_type\u4e3aJSAPI\u65f6\uff0copenid\u4e3a\u5fc5\u586b\u53c2\u6570")
        if data["trade_type"] == "NATIVE" and "product_id" not in data:
            raise WeixinPayError("trade_type\u4e3aNATIVE\u65f6\uff0cproduct_id\u4e3a\u5fc5\u586b\u53c2\u6570")
        data.setdefault("notify_url", self.notify_url)
        if "spbill_create_ip" not in data:
            data.setdefault("spbill_create_ip", self.remote_addr)

        raw = self._fetch(url, data)
        return raw

    def jsapi(self, **kwargs):
        """
        \u751f\u6210\u7ed9JavaScript\u8c03\u7528\u7684\u6570\u636e
        \u8be6\u7ec6\u89c4\u5219\u53c2\u8003 https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&index=6
        """
        kwargs.setdefault("trade_type", "JSAPI")
        raw = self.unified_order(**kwargs)
        package = "prepay_id={0}".format(raw["prepay_id"])
        timestamp = str(int(time.time()))
        nonce_str = self.nonce_str
        raw = dict(appId=self.app_id, timeStamp=timestamp,
                   nonceStr=nonce_str, package=package, signType="MD5")
        sign = self.sign(raw)
        return dict(package=package, appId=self.app_id, signType="MD5",
                    timeStamp=timestamp, nonceStr=nonce_str, sign=sign)

    def order_query(self, **data):
        """
        \u8ba2\u5355\u67e5\u8be2
        out_trade_no, transaction_id\u81f3\u5c11\u586b\u4e00\u4e2a
        appid, mchid, nonce_str\u4e0d\u9700\u8981\u586b\u5165
        """
        url = "https://api.mch.weixin.qq.com/pay/orderquery"

        if "out_trade_no" not in data and "transaction_id" not in data:
            raise WeixinPayError("\u8ba2\u5355\u67e5\u8be2\u63a5\u53e3\u4e2d\uff0cout_trade_no\u3001transaction_id\u81f3\u5c11\u586b\u4e00\u4e2a")

        return self._fetch(url, data)

    def close_order(self, out_trade_no, **data):
        """
        \u5173\u95ed\u8ba2\u5355
        out_trade_no\u5fc5\u586b
        appid, mchid, nonce_str\u4e0d\u9700\u8981\u586b\u5165
        """
        url = "https://api.mch.weixin.qq.com/pay/closeorder"

        data.setdefault("out_trade_no", out_trade_no)

        return self._fetch(url, data)

    def refund(self, **data):
        """
        \u7533\u8bf7\u9000\u6b3e
        out_trade_no\u3001transaction_id\u81f3\u5c11\u586b\u4e00\u4e2a\u4e14
        out_refund_no\u3001total_fee\u3001refund_fee\u3001op_user_id\u4e3a\u5fc5\u586b\u53c2\u6570
        appid\u3001mchid\u3001nonce_str\u4e0d\u9700\u8981\u586b\u5165
        """
        if not self.key or not self.cert:
            raise WeixinError("\u9000\u6b3e\u7533\u8bf7\u63a5\u53e3\u9700\u8981\u53cc\u5411\u8bc1\u4e66")
        url = "https://api.mch.weixin.qq.com/secapi/pay/refund"
        if "out_trade_no" not in data and "transaction_id" not in data:
            raise WeixinPayError("\u9000\u6b3e\u7533\u8bf7\u63a5\u53e3\u4e2d\uff0cout_trade_no\u3001transaction_id\u81f3\u5c11\u586b\u4e00\u4e2a")
        if "out_refund_no" not in data:
            raise WeixinPayError("\u9000\u6b3e\u7533\u8bf7\u63a5\u53e3\u4e2d\uff0c\u7f3a\u5c11\u5fc5\u586b\u53c2\u6570out_refund_no");
        if "total_fee" not in data:
            raise WeixinPayError("\u9000\u6b3e\u7533\u8bf7\u63a5\u53e3\u4e2d\uff0c\u7f3a\u5c11\u5fc5\u586b\u53c2\u6570total_fee");
        if "refund_fee" not in data:
            raise WeixinPayError("\u9000\u6b3e\u7533\u8bf7\u63a5\u53e3\u4e2d\uff0c\u7f3a\u5c11\u5fc5\u586b\u53c2\u6570refund_fee");

        return self._fetch(url, data, True)

    def refund_query(self, **data):
        """
        \u67e5\u8be2\u9000\u6b3e
        \u63d0\u4ea4\u9000\u6b3e\u7533\u8bf7\u540e\uff0c\u901a\u8fc7\u8c03\u7528\u8be5\u63a5\u53e3\u67e5\u8be2\u9000\u6b3e\u72b6\u6001\u3002\u9000\u6b3e\u6709\u4e00\u5b9a\u5ef6\u65f6\uff0c
        \u7528\u96f6\u94b1\u652f\u4ed8\u7684\u9000\u6b3e20\u5206\u949f\u5185\u5230\u8d26\uff0c\u94f6\u884c\u5361\u652f\u4ed8\u7684\u9000\u6b3e3\u4e2a\u5de5\u4f5c\u65e5\u540e\u91cd\u65b0\u67e5\u8be2\u9000\u6b3e\u72b6\u6001\u3002

        out_refund_no\u3001out_trade_no\u3001transaction_id\u3001refund_id\u56db\u4e2a\u53c2\u6570\u5fc5\u586b\u4e00\u4e2a
        appid\u3001mchid\u3001nonce_str\u4e0d\u9700\u8981\u586b\u5165
        """
        url = "https://api.mch.weixin.qq.com/pay/refundquery"
        if "out_refund_no" not in data and "out_trade_no" not in data \
                and "transaction_id" not in data and "refund_id" not in data:
            raise WeixinPayError("\u9000\u6b3e\u67e5\u8be2\u63a5\u53e3\u4e2d\uff0cout_refund_no\u3001out_trade_no\u3001transaction_id\u3001refund_id\u56db\u4e2a\u53c2\u6570\u5fc5\u586b\u4e00\u4e2a")

        return self._fetch(url, data)

    def download_bill(self, bill_date, bill_type="ALL", **data):
        """
        \u4e0b\u8f7d\u5bf9\u8d26\u5355
        bill_date\u3001bill_type\u4e3a\u5fc5\u586b\u53c2\u6570
        appid\u3001mchid\u3001nonce_str\u4e0d\u9700\u8981\u586b\u5165
        """
        url = "https://api.mch.weixin.qq.com/pay/downloadbill"
        data.setdefault("bill_date", bill_date)
        data.setdefault("bill_type", bill_type)

        if "bill_date" not in data:
            raise WeixinPayError("\u5bf9\u8d26\u5355\u63a5\u53e3\u4e2d\uff0c\u7f3a\u5c11\u5fc5\u586b\u53c2\u6570bill_date")

        return self._fetch(url, data)
